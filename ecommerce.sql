DROP TABLE PRODUCTCATEGORIES;
DROP TABLE ORDERDETAILS;
DROP TABLE ORDERS;
DROP TABLE PRODUCTS;
DROP TABLE USERS;

CREATE TABLE USERS (
    USERID int NOT NULL,
    USERNAME VARCHAR(64) NOT NULL,
    FNAME VARCHAR(64) NOT NULL,
    LNAME VARCHAR(64),
    EMAIL VARCHAR(200) NOT NULL,
    PASSWORD VARCHAR(64) NOT NULL,
    CITY VARCHAR(64),
    USER_STATE VARCHAR(32),
    ADDRESS VARCHAR(100),
    COUNTRY VARCHAR(32),
    ZIP_CODE VARCHAR(16),
    PHONE_NUMBER VARCHAR(48),
    REGISTER_DATE TIMESTAMP,
    VERLIFY_CODE VARCHAR(16),
    ACTIVATE_DATE TIMESTAMP,
    PRIMARY KEY(USERID)
);

CREATE TABLE PRODUCTS (
    PRODUCTID int NOT NULL,
    PRODUCT_NAME varchar(128) NOT NULL,
    PRODUCT_PRICE float NOT NULL DEFAULT 0.00,
    PRODUCT_DESC varchar(2048),
    PRODUCT_IMAGE varchar(128),
    PRODUCT_CATEGORYID int UNIQUE NOT NULL,
    PRODUCT_UPDATEDATE timestamp NOT NULL,
    PRODUCT_STOCK smallint NOT NULL,
    PRODUCT_LIVE boolean NOT NULL,
    PRODUCT_LOCATION varchar(250),
    PRIMARY KEY(PRODUCTID)
);

CREATE TABLE PRODUCTCATEGORIES (
    CATEGORY_ID int NOT NULL,
    CATEGORYNAME varchar(64),
    PRIMARY KEY(CATEGORY_ID),
    FOREIGN KEY(CATEGORY_ID) REFERENCES PRODUCTS(PRODUCT_CATEGORYID)
);

CREATE TABLE ORDERS (
    ORDER_ID INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1001, INCREMENT BY 1),
    ORDER_USERID INT NOT NULL,
    ORDER_AMOUNT INT NOT NULL DEFAULT 1,
    ORDER_SHIPNAME VARCHAR(128) NOT NULL,
    ORDER_SHIPADDRESS VARCHAR(128),
    ORDER_SHIPADDRESS2 VARCHAR(128),
    ORDER_CITY VARCHAR(64),
    ORDER_STATE VARCHAR(32),
    ORDER_ZIP VARCHAR(16),
    ORDER_ADDRESS VARCHAR(100),
    ORDER_PHONE VARCHAR(48),
    ORDER_TAX FLOAT NOT NULL,
    ORDER_EMAIL VARCHAR(100),
    ORDER_DATE TIMESTAMP NOT NULL,
    ORDER_SHIPPED BOOLEAN DEFAULT FALSE,
    PRIMARY KEY(ORDER_ID),
    FOREIGN KEY(ORDER_USERID) REFERENCES USERS(USERID)
);

CREATE TABLE ORDERDETAILS (
    DETAILID INT NOT NULL,
    DETAILORDERID INT NOT NULL,
    DETAILPRODUCTID INT NOT NULL,
    DETAILNAME VARCHAR(256),
    DETAILPRICE FLOAT,
    DETAILQUANTITY INT,
    PRIMARY KEY(DETAILID),
    FOREIGN KEY(DETAILORDERID) REFERENCES ORDERS(ORDER_ID)
);
